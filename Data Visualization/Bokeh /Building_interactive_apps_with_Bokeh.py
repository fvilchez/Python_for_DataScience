
from bokeh.io import curdoc
from bokeh.plotting import figure
from bokeh.layouts import widgetbox, column, row
from bokeh.models import Slider, ColumnDataSource, Select
import pandas as pd
import numpy as np
from bokeh.models import Button
####################### Using the current document #############################

#Nos creamos una nueva figura
#plot = figure()

#Agregamos gráfico de tipo línea
#plot.line(x = [1, 2, 3, 4, 5], y = [2, 5, 4, 6, 7])

#Añadimos nuestro plot a nuestro documento
#curdoc().add_root(plot)


############################### Add a single slider ############################

#Nos generamos nuestro slider
#slider = Slider(title = 'my slider', start = 0, end = 10, step = 0.1, value = 2)

#Creamos nuestro widgetbox layout
#layout = widgetbox(slider)

#Agregamos el layout a nuestro documento
#curdoc().add_root(layout)


################### Multiple sliders in one document ###########################


#Nos creamos nuestro primer slider
#slider1 = Slider(title = 'slider1', start = 0, end = 10, step = 0.1, value = 2)

#Nos creamos nuestro segundo slider
#slider2 = Slider(title = 'slider2', start = 10, end = 100, step = 1, value = 20)

#Agregamos ambos sliders
#layout = widgetbox(slider1, slider2)

#Agregamos el layout a nuestro current document
#curdoc().add_root(layout)


################ How to combine Bokeh models into layouts ######################

###Cargamos los datos
##df = pd.read_csv('auto-mpg.csv')
##
###Nos creamos un objeto de tipo ColumnDataSource
##source = ColumnDataSource(data = {'x': df.hp, 'y' : df.mpg})
##
###Nos creamos nuestra figura
##p = figure(x_axis_label = 'hp', y_axis_label = 'mpg')
##
###Agregamos un glyph de tipo circular
##p.circle(x = 'x', y = 'y', source = source)
##
##
##def update_plot(attr, old, new):
##    if new == 'US':
##        new_x = df[df.origin == 'US']['hp']
##        new_y = df[df.origin == 'US']['mpg']
##        source.data = {'x': new_x, 'y': new_y}
##    else:
##        new_x = df[df.origin == 'Europe']['hp']
##        new_y = df[df.origin == 'Europe']['mpg']
##
##        source.data = {'x': new_x, 'y': new_y}
##
##        
##select = Select(title ='Origin', options = ['US','Europe'], value = 'Europe')
##select.on_change('value', update_plot)
##
###Nos creamos nuestro layout en forma de columna
##layout = row(select, p)
##        
###Agregamos esto a nuestro documento
##curdoc().add_root(layout)


###################### Synchronize two dropdowns ###############################

##select1 = Select(title = 'First', options = ['A', 'B'], value = 'A')
##select2 = Select(title = 'Second', options = ['1', '2', '3'], value = '1')
##
##def callback(attr, old, new):
##    if select1.value == 'A':
##        select2.options = ['1', '2', '3']
##        select2.value = '1'
##    else:
##        select2.options = ['100', '200', '300']
##        select2.value = '100'
##
##select1.on_change('value', callback)

##layout = widgetbox(select1, select2)
##curdoc().add_root(layout)



#################################### Buton widgets #############################


        
x = np.array([  0.        ,   0.05025126,   0.10050251,   0.15075377,
         0.20100503,   0.25125628,   0.30150754,   0.35175879,
         0.40201005,   0.45226131,   0.50251256,   0.55276382,
         0.60301508,   0.65326633,   0.70351759,   0.75376884,
         0.8040201 ,   0.85427136,   0.90452261,   0.95477387,
         1.00502513,   1.05527638,   1.10552764,   1.15577889,
         1.20603015,   1.25628141,   1.30653266,   1.35678392,
         1.40703518,   1.45728643,   1.50753769,   1.55778894,
         1.6080402 ,   1.65829146,   1.70854271,   1.75879397,
         1.80904523,   1.85929648,   1.90954774,   1.95979899,
         2.01005025,   2.06030151,   2.11055276,   2.16080402,
         2.21105528,   2.26130653,   2.31155779,   2.36180905,
         2.4120603 ,   2.46231156,   2.51256281,   2.56281407,
         2.61306533,   2.66331658,   2.71356784,   2.7638191 ,
         2.81407035,   2.86432161,   2.91457286,   2.96482412,
         3.01507538,   3.06532663,   3.11557789,   3.16582915,
         3.2160804 ,   3.26633166,   3.31658291,   3.36683417,
         3.41708543,   3.46733668,   3.51758794,   3.5678392 ,
         3.61809045,   3.66834171,   3.71859296,   3.76884422,
         3.81909548,   3.86934673,   3.91959799,   3.96984925,
         4.0201005 ,   4.07035176,   4.12060302,   4.17085427,
         4.22110553,   4.27135678,   4.32160804,   4.3718593 ,
         4.42211055,   4.47236181,   4.52261307,   4.57286432,
         4.62311558,   4.67336683,   4.72361809,   4.77386935,
         4.8241206 ,   4.87437186,   4.92462312,   4.97487437,
         5.02512563,   5.07537688,   5.12562814,   5.1758794 ,
         5.22613065,   5.27638191,   5.32663317,   5.37688442,
         5.42713568,   5.47738693,   5.52763819,   5.57788945,
         5.6281407 ,   5.67839196,   5.72864322,   5.77889447,
         5.82914573,   5.87939698,   5.92964824,   5.9798995 ,
         6.03015075,   6.08040201,   6.13065327,   6.18090452,
         6.23115578,   6.28140704,   6.33165829,   6.38190955,
         6.4321608 ,   6.48241206,   6.53266332,   6.58291457,
         6.63316583,   6.68341709,   6.73366834,   6.7839196 ,
         6.83417085,   6.88442211,   6.93467337,   6.98492462,
         7.03517588,   7.08542714,   7.13567839,   7.18592965,
         7.2361809 ,   7.28643216,   7.33668342,   7.38693467,
         7.43718593,   7.48743719,   7.53768844,   7.5879397 ,
         7.63819095,   7.68844221,   7.73869347,   7.78894472,
         7.83919598,   7.88944724,   7.93969849,   7.98994975,
         8.04020101,   8.09045226,   8.14070352,   8.19095477,
         8.24120603,   8.29145729,   8.34170854,   8.3919598 ,
         8.44221106,   8.49246231,   8.54271357,   8.59296482,
         8.64321608,   8.69346734,   8.74371859,   8.79396985,
         8.84422111,   8.89447236,   8.94472362,   8.99497487,
         9.04522613,   9.09547739,   9.14572864,   9.1959799 ,
         9.24623116,   9.29648241,   9.34673367,   9.39698492,
         9.44723618,   9.49748744,   9.54773869,   9.59798995,
         9.64824121,   9.69849246,   9.74874372,   9.79899497,
         9.84924623,   9.89949749,   9.94974874,  10.        ])

y = np.array([ 0.06452207,  0.9219679 ,  1.04488724,  0.37949654,  0.9950581 ,
        1.16617715,  0.91210441,  1.33507398,  0.49369765,  0.54210356,
        1.44900126,  0.71961322,  1.56339895,  1.04913933,  1.04689138,
        1.32245148,  1.59439   ,  1.00843741,  1.1403681 ,  1.49138695,
        1.39505781,  1.08906397,  1.57791984,  1.02678558,  1.08850625,
        1.53403414,  1.56999471,  1.20243432,  1.57753546,  1.23850227,
        1.47087386,  1.19718214,  1.71622935,  1.0291386 ,  1.23363417,
        1.11561821,  1.07403769,  1.20100475,  1.48266834,  1.64034258,
        0.99619521,  1.54974781,  1.29101952,  1.34799592,  1.43255748,
        1.1239541 ,  1.13021416,  1.05852546,  1.44174515,  0.96992637,
        0.63669762,  0.68169001,  0.8945482 ,  1.00814437,  1.21281609,
        1.34998648,  1.01369833,  0.51360033,  0.38756715,  0.41299556,
        0.79827274,  0.23883974,  0.75949911, -0.02156888,  0.40778786,
        0.34108789,  0.54318041, -0.10495289,  0.07073736,  0.48028695,
        0.59587234, -0.21927591,  0.03022661,  0.2112373 , -0.42561824,
       -0.36604812,  0.07834988,  0.25971243, -0.29785993,  0.00875569,
        0.01998269,  0.16487618, -0.09747667, -0.21881464, -0.56093303,
       -0.81661924, -0.26507105, -0.25321243, -0.309735  , -0.23115227,
       -0.2738919 , -0.57018822, -0.82680196, -0.31528336, -0.16875928,
       -0.14383065, -0.90712286, -0.18221412, -0.01321483, -0.9498762 ,
       -0.89500103, -0.28136795,  0.08375263, -0.21989323, -0.2775745 ,
       -0.24864656, -0.16349692,  0.14686625, -0.233956  , -0.38891355,
       -0.34409295, -0.19413878,  0.10865343,  0.15140443, -0.30181871,
        0.43083321, -0.41730037,  0.06191428,  0.56693291, -0.0404305 ,
        0.06367965,  0.1696862 ,  0.3604208 ,  0.39253541,  0.64669052,
        0.04593567,  0.82727538,  0.57010287,  0.71863775,  0.82546912,
        0.85048377,  0.65466551,  0.53423832,  1.35149075,  0.69715094,
        1.254076  ,  1.24303634,  1.10944621,  1.01960536,  0.82865393,
        1.22771123,  1.2986156 ,  1.10081524,  0.98665835,  1.81049152,
        1.61902872,  1.58867475,  0.94131769,  1.73100943,  1.86349835,
        0.95475834,  1.68921782,  1.43367285,  1.18680308,  1.0621469 ,
        1.75138389,  1.49641725,  1.97982349,  1.95221957,  1.14463857,
        1.63920041,  1.35128849,  1.81652284,  1.00083016,  1.59015337,
        1.8975771 ,  1.16056063,  1.27359323,  1.74218118,  1.37431811,
        1.3078046 ,  1.68177547,  1.40090707,  1.23648001,  0.90008849,
        1.32284243,  0.66865702,  1.12102452,  1.01605427,  0.98318904,
        0.70318252,  1.29527964,  0.74640958,  0.68015686,  0.23507212,
        1.09425152,  0.67645975,  0.43904814,  0.31646191,  0.42105757,
        0.70749266,  0.19633414,  0.13958439, -0.19147908, -0.21982526,
        0.28961426,  0.30809592, -0.08194307, -0.21315   ,  0.01156136])

plot = figure()

button = Button(label='Update Data')

source = ColumnDataSource({'x':x, 'y':y})

plot.line(x,y)

# Define an update callback with no arguments: update
def update():

    # Compute new y values: y
    y += 100
    # Update the ColumnDataSource data dictionary
    source.data = {'x': x, 'y': y}

# Add the update callback to the button
button.on_click(update)

# Create layout and add to current document
layout = column(button, plot)
curdoc().add_root(layout)
